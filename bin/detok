#!/usr/bin/env python3

from    os.path  import abspath, dirname, join
from    site  import addsitedir
BASEDIR = dirname(dirname(abspath(__file__)))
if __name__ == '__main__': addsitedir(join(BASEDIR, 'pylib'))

from    argparse  import ArgumentParser
import  sys

from    bastok.tlines import TLines
from    bastok.msx2 import Detokenizer
from    bastok.msxchars import CHARMAP

def die(exitcode, *msglines):
    for l in msglines:
        print(l, file=sys.stderr)
    exit(exitcode)

def parseargs():
    p = ArgumentParser(description='MSX-BASIC detokenizer')
    arg = p.add_argument

    arg('-c', '--charset', default='ja',
        help='MSX charset: ja (default), int, ar, ru, etc.')
    arg('-z', '--dos-text', action='store_true',
        help='Use DOS text file format (CR+LF line endings, ^Z file end marker')
    arg('input', help='input file (required)')

    return p.parse_args()

def main(args):

    cmap = CHARMAP.get(args.charset)
    if cmap is None:
        die(3, 'Unknown MSX charset: {}'.format(args.charset),
            'Known charsets:',
            *[ ' {:>4}: {}'.format(k, v.description)
               for k, v in sorted(CHARMAP.items()) ]
            )

    with open(args.input, 'rb') as f:
        type = f.read(1)[0]
        if type != 0xFF:
            raise RuntimeError('bad type byte ${:02X}'.format(type))
        tl = TLines(0x8001, f.read())

    endline = '\n';
    if args.dos_text: endline = '\r\n'
    for lineno, tline in tl.lines():
        detok = Detokenizer(cmap, tline, lineno)
        print(detok.detokenize(), end=endline)
    if args.dos_text:
        print('\x1A', end='')

if __name__ == '__main__':
    main(parseargs())
