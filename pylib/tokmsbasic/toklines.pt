from    tokmsbasic.toklines  import TokLines, le
from    io  import BytesIO
import  pytest, struct

def test_le():
    assert b'\x00\x00' == le(0)
    assert b'\x34\x12' == le(0x1234)
    assert b'\xFF\xFF' == le(65535)
    with pytest.raises(struct.error): le(65536)

####################################################################

def test_setline_text():
    tl = TokLines()
    assert None is tl.orig_text
    assert 0x0801 == tl.txttab

    tl.setline(20, b'this is a longer line')
    tl.setline(10, b'\x01\x02\xFE\xFF')

    #   If we ever need the first address after the text, here's the API.
    #assert tl.txttab + len(tl.text()) == tl.vartab()

    #   Here's an example of how you can get a dump from a test, for debugging.
    with open('z', 'wb') as f: f.write(tl.text())

    expected = b''.join([
        le(0x80A), le(10), b'\x01\x02\xFE\xFF',      b'\x00',
        le(0x824), le(20), b'this is a longer line', b'\x00',
        le(0),
        ])
    assert expected == tl.text()

    bio = BytesIO()
    tl.write_to(bio)
    assert b'\xFF' + expected == bio.getvalue()

    expected_new_txttab = bytearray(expected)
    for i in (0x01, 0x0A):    # update offsets
        assert expected_new_txttab[i] == 0x08
        expected_new_txttab[i] = 0x09
    tl.txttab = 0x901
    assert bytes(expected_new_txttab) == tl.text()


def test_setline_bad_lineno():
    tl = TokLines()
    with pytest.raises(ValueError): tl.setline(-1, b'')
    with pytest.raises(ValueError): tl.setline(tl.maxlin + 1, b'')
    tl.setline(tl.maxlin, b'')

def test_setline_bad_data():
    with pytest.raises(ValueError):
        TokLines().setline(10, b'\x12\x00\x34')

####################################################################

TEST_TEXT = b''.join([
    b'\xFF',                        # file type header
    b'\x11\x88', b'\x0A\x00',       # next line pointer, line 10
    b'\x8F Tokenized\x00',          # REM Tokenized
    b'\x1B\x88', b'\x14\x00',       # next line pointer, line 10
    b'\x91 "x"\x00'                 # PRINT "x"
    b'\x00\x00',                    # terminator
])

def test_parsetext():
    tl = TokLines(TEST_TEXT)
    assert TEST_TEXT == tl.orig_text
    #assert TEST_TEXT[1:] == tl.text()
    #assert 0x8800 == tl.txttab
